//Import a libraries

====> 
		import pandas as pd
		from sklearn.tree import DecisionTreeClassifier
		from sklearn.model_selection import train_test_split
		from sklearn.metrics import accuracy_score, confusion_matrix, plot_confusion_matrix, classification_report
		import joblib
		from matplotlib import pyplot as plt
		import seaborn as sns
		import matplotlib.pyplot as plt


//stablish a Dataset
====> 	data = pd.read_csv('sport_prediction.csv')


//Display statistic description
====> 	data.describe()

//Display a Dataset shape
====> 	data.shape


//Display a top 5 rows
====> 	data.head()


//Display age statistic in the graph
====> 	sns.countplot(x='Age', data=data)


//Display Height statistic in the graph
====> 	sns.countplot(x='Height', data=data)


//Display Sex statistic in the graph
====> 	sns.countplot(x='Sex', data=data)



//Convert sex type Female or male by 1 or 0
====> 	data['Sex'].replace(['Femelle', 'Male'], [0,1], inplace=True)


//Display a top 5 rows to verifiy data['Sex'] value
====> 	data.head()


//Affect features (facteurs) to variable X with dropping the target data['Sport']
====> 	X = data.drop(columns="Sport")

//Display a top 5 rows of X value
====> 	X.head()

//Affect target (facteurs) to variable y with the target data['Sport']
====> 	y = data['Sport']


//Display a top 5 rows of y value
====> 	y.head()


//Trainning a Model
====> 	X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)


//Build a Model
====> 	clf = DecisionTreeClassifier()

//fit a model
====> 	clf.fit(X_train, y_train)

//Test a predicted a model
====> 	predict = clf.predict(X_test)

//Display a predict
====> 	predict

//Display a test accuracy
====> 	accuracy = accuracy_score(y_test, predict)

//student sport prediction
new_student = clf.predict([[17, 4, 3]])

//Display a student sport prediction
====> 	new_student


joblib.dump(clf, 'ml_sport_model.joblib')


//*******************************************************************************Django App site

// create a django project
====> 	django-admin startproject sport_pedict_proj

// create a django app
====> 	python manage.py startapp dashboard_app

// define dashboard_app in the setting.
====> 	dashboard_app

//in the templates setting directory define the templates.
====> 	'DIRS': [BASE_DIR/'templates'],

//in the templates setting define the databate config driver
====> 
		DATABASES = {
			'default': {
				'ENGINE': 'django.db.backends.mysql',
				'NAME': 'predict_db',
				'HOST': '127.0.0.1',
				'PORT': '3306',
				'USER': 'root',
				'PASSWORD': '*********',
			}
		}

// in the root folder of project create a templates folder.
====> 	templates

// in the a templates folder create 2 folders.
====> 	dashboard
====> 	partials

// in the a dashboard folder create 2 html files.
====> 	index.html
====> 	predictions.html

// in the a partials folder create 2 html files.
====> 	base.html
====> 	nav.html

// run a django app to test it
python manage.py runserver


// in dashboard_app create urls.py and passe this: 
====> 	
		from django.urls import path
		from . import views

		urlpatterns = [
			path('', views.index, name='dashboard-index'),
			path('predictions/', views.predictions, name='dashboard-predictions'),
		]
		
		
// in dashboard views passe this:
====>
		from django.shortcuts import render

		def index(request):
			return render(request, 'dashboard/index.html')

		def predictions(request):
			return render(request, 'dashboard/predictions.html')
			
// replace the content of the sport_pedict_proj urls by this:
====>	
		from django.contrib import admin
		from django.urls import path, include

		urlpatterns = [
			path('admin/', admin.site.urls),
			path('', include('dashboard_app.urls')),
		]
		
// in the model passe this: 
====>
		from unicodedata import name
		from django.db import models
		from django.core.validators import MaxValueValidator, MinValueValidator
		from sklearn.tree import DecisionTreeClassifier
		import joblib

		GENDER = (
			(0, 'Female'),
			(1, 'Male'),
		)

		class Data(models.Model):
			name = models.CharField(max_length=100, null=True)
			age = models.PositiveBigIntegerField(validators=[MinValueValidator(13), MaxValueValidator(19)], null=True)
			height = models.PositiveBigIntegerField(null=True)
			sex = models.PositiveBigIntegerField(choices=GENDER, null=True)
			predictions = models.CharField(max_length=100, blank=True)
			date = models.DateTimeField(auto_now_add=True)

			def save(self, *args, **kwargs):
				ml_model = joblib.load('ml_model/ml_sport_model.joblib')
				self.predictions = ml_model.predict([[self.age, self.height, self.sex]])
				return super().save(*args, **kwargs)

			class Meta:
				ordering = ['-date']

			def __str__(self):
				return self.name
				
				
// install sklearn and joblib
====> pip install sklearn
====> pip install joblib



//  in dashboard_app create forms.py and paste this:
====>
		from dataclasses import fields
		from django import forms
		from .models import Data

		class DataForm(forms.ModelForm):
			class Meta:
				model = Data
				fields = ['name', 'age', 'height', 'sex']



//  in dashboard_app admin paste
====>
		from django.contrib import admin
		from .models import Data

		class DataAdmin(admin.ModelAdmin):
			list_display = ('name', 'age', 'height', 'sex', 'predictions')

		admin.site.register(Data, DataAdmin)


// in the root folder of project create a ml_model_lib folder.
====> 	ml_model_lib


// in folder ml_model_lib paste the maching learning joblib file.
====>	ml_sport_model.joblib


// makemigrations and migrate
====> 	python manage.py makemigrations
or ./manage.py makemigrations <myapp>
====> 	python manage.py migrate


//create a superuser
====> 	python manage.py createsuperuser

// run a server
====> 	python manage.py runserver

// Now let us config the templates. In the dashboard index.html file paste this:
====> 	

		{% extends 'partials/base.html' %}
		{%block title %} Home {%endblock%}
		{% load crispy_forms_tags %}

		{% block content %}
			<div class="container">
				<div class="row mt-4">
					<div class="col-md-8 offset-md-2">
						<div class="card shadow">
							<div class="card-card-body ml-5 mr-5 mb-5">
								<form method="POST">
									{% csrf_token %}
									{{form|crispy}}
									<input class="btn btn-primary" type="submit" value="Make Prediction"/>
								</form>
							</div>
						</div>
					</div>
				</div>
			</div>
		{%endblock%}
		
		
//In the dashboard predictions.html file paste this:
====> 	

		{% extends 'partials/base.html' %}

		{%block title %} List Predictions {%endblock%}

		{% block content %}
			<div class="container">
				<div class="row mt-4">
					<div class="col-md-8 offset-md-2">
						
						<table class="table">
							<thead>
							  <tr>
								<th scope="col">Name</th>
								<th scope="col">Age</th>
								<th scope="col">Height</th>
								<th scope="col">Sex</th>
								<th scope="col">Prediction</th>
							  </tr>
							</thead>
							<tbody>
							  {% for data in predicted_sports%}
							  <tr>
								<th scope="row">{{data.name}}</th>
								<td>{{data.age}}</td>
								<td>{{data.height}}</td>
								<td>{{data.sex}}</td>
								<td>{{data.predictions}}</td>
							  </tr>
							  {% endfor %}
							</tbody>
						  </table>

					</div>
				</div>
			</div>
		{%endblock%}
		

//In the partials base.html file paste this:
====> 

		<!doctype html>
		<html lang="en">
		  <head>
			<!-- Required meta tags -->
			<meta charset="utf-8">
			<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

			<!-- Bootstrap CSS -->
			<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css" integrity="sha384-zCbKRCUGaJDkqS1kPbPd7TveP5iyJE0EjAuZQTgFLD2ylzuqKfdKlfG/eSrtxUkn" crossorigin="anonymous">

			<title>{% block title %}{% endblock title %}</title>
		  </head>
		  <body>
			 {% include  'partials/nav.html'%}

			 {% block content %} {%endblock%}

			<!-- Optional JavaScript; choose one of the two! -->

			<!-- Option 1: jQuery and Bootstrap Bundle (includes Popper) -->
			<script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
			<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-fQybjgWLrvvRgtW6bFlB7jaZrFsaBXjsOMm/tB9LTS58ONXgqbR9W8oWht/amnpF" crossorigin="anonymous"></script>

			<!-- Option 2: Separate Popper and Bootstrap JS -->
			<!--
			<script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
			<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
			<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.min.js" integrity="sha384-VHvPCCyXqtD5DqJeNxl2dtTyhF78xXNXdkwX1CZeRusQfRKp+tA7hAShOK/B/fQ2" crossorigin="anonymous"></script>
			-->
		  </body>
		</html>
		
		
//In the partials nav.html file paste this:
====> 		
		<nav class="navbar navbar-dark bg-dark">
			<div class="container">
			 <a class="navbar-brand" href="{% url 'dashboard-index' %}">Sport Predictions App</a>
			 <a class="navbar-brand ml-auto" href="{% url 'dashboard-predictions' %}">List Predictions</a>
			</div>
		</nav>
		
//replce the content of dashboard_app views by this:		

from django.shortcuts import render, redirect
from .models import Data
from .forms import DataForm

def index(request):
    if request.method == 'POST':
        form = DataForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('dashboard-predictions')
    else:
        form = DataForm()
    context = {
        'form': form
    }
    return render(request, 'dashboard/index.html', context)

def predictions(request):
    predicted_sports = Data.objects.all()
    context = {
        'predicted_sports': predicted_sports
    }
    return render(request, 'dashboard/predictions.html', context)
		
//Install crispy forms for django
====>	pip install django-crispy-forms


//in the templates setting installed app add this.
====>
		INSTALLED_APPS = (
			...
			'crispy_forms',
		)
		

//in setting add the crispy template pack.
====>	CRISPY_TEMPLATE_PACK = 'bootstrap4'



//-------------------------------------------------------------------------------------------------------------------------

// In the dashboard index.html file add Crispy filter to render a form in line 3 if it is not added:
====>	{% load crispy_forms_tags %}